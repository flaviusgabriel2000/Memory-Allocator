// Memory Allocator

	The basic idea is simple: in the malloc() function, it is
initially checked whether the head of the global list is NULL.
If so, it means that this is the first time the function is entered.
Otherwise, the list of memory blocks is traversed and a FREE block
is searched for that satisfies the size constraints. If a suitable block
is found, its status is changed from FREE to ALLOC. If nothing is found,
it means that we actually have to allocate memory, using sbrk() or mmap(),
depending on the requested size.
	This is the minimal operating principle of malloc. Furthermore,
I adapted it according to the conditions in the theme statement, namely the
alignment of block_meta and the payload to 8 bytes, heap preallocation (depending
on the value of the heap_preallocated variable), block truncation techniques and
merging adjacent free blocks, etc.